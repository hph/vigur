"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Vector=function(){function Vector(x,y){_classCallCheck(this,Vector);var _ref=[x,y];this.x=_ref[0],this.y=_ref[1]}return _createClass(Vector,[{key:"normalize",value:function(){var _ref2=[this.x/this.magnitude,this.y/this.magnitude];return this.x=_ref2[0],this.y=_ref2[1],this}},{key:"invert",value:function(){var _ref3=[-this.x,-this.y];return this.x=_ref3[0],this.y=_ref3[1],this}},{key:"round",value:function(){var _ref4=[Math.round(this.x),Math.round(this.y)];return this.x=_ref4[0],this.y=_ref4[1],this}},{key:"zero",value:function(){return this.x=this.y=0,this}},{key:"clone",value:function(){return new Vector(this.x,this.y)}},{key:"isEqual",value:function(other){return this.x===other.x&&this.y===other.y}},{key:"add",value:function(other){var _ref5=[this.x+other.x,this.y+other.y];return this.x=_ref5[0],this.y=_ref5[1],this}},{key:"subtract",value:function(other){var _ref6=[this.x-other.x,this.y-other.y];return this.x=_ref6[0],this.y=_ref6[1],this}},{key:"multiply",value:function(other){var _ref7=[this.x*other.x,this.y*other.y];return this.x=_ref7[0],this.y=_ref7[1],this}},{key:"divide",value:function(other){var _ref8=[this.x/other.x,this.y/other.y];return this.x=_ref8[0],this.y=_ref8[1],this}},{key:"dot",value:function(other){return this.x*other.x+this.y*other.y}},{key:"cross",value:function(other){return this.x*other.y-this.y*other.x}},{key:"distance",value:function(other){return Math.sqrt(Math.pow(this.x-other.x,2)+Math.pow(this.y-other.y,2))}},{key:"toString",value:function(){return"Vector {x: "+this.x+", y: "+this.y+"}"}},{key:"toArray",value:function(){return[this.x,this.y]}},{key:"toObject",value:function(){return{x:this.x,y:this.y}}},{key:"magnitude",get:function(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"length",get:function(){return this.magnitude}},{key:"normalized",get:function(){return this.clone().normalize()}},{key:"inverted",get:function(){return this.clone().invert()}},{key:"rounded",get:function(){return this.clone().round()}},{key:"isZero",get:function(){return 0===this.x&&0===this.y}},{key:"horizontalAngle",get:function(){return Math.atan2(this.y,this.x)}},{key:"verticalAngle",get:function(){return Math.atan2(this.x,this.y)}},{key:"direction",get:function(){return this.horizontalAngle}}],[{key:"degreesToRadians",value:function(degrees){return degrees*Math.PI/180}},{key:"radiansToDegrees",value:function(radians){return radians/Math.PI*180}}]),Vector}();